import groovy.json.*

apply plugin: 'com.android.application'


def inputFile = new File("./../Website/package.json")
def pkg = new JsonSlurper().parseText(inputFile.text)
def app_name = "MMRL"
def cur_time = System.currentTimeMillis()

android {
    compileSdk pkg.config.target_sdk
    namespace pkg.config.application_id

    defaultConfig {
        applicationId pkg.config.application_id
        minSdk pkg.config.min_sdk
        targetSdk pkg.config.target_sdk
        versionName pkg.config.version_name
        versionCode pkg.config.version_code
    }

    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            universalApk true
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            outputFileName = outputFileName.replace(".apk", "-${variant.versionName}-${variant.versionCode}.apk").replace("-unsigned", "")
        }
    }

    buildTypes {
        release {
            resValue "string", "app_name", "${app_name}"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            multiDexEnabled true
            buildConfigField "long", "BUILD_DATE", "${cur_time}"
            buildConfigField "String", "BUILD_TYPE", "\"production\""
        }
        debug {
            resValue "string", "app_name", "${app_name} Debug"
            jniDebuggable true
            renderscriptDebuggable true
            minifyEnabled false
            multiDexEnabled false
            applicationIdSuffix '.debug'
            buildConfigField "long", "BUILD_DATE", "${cur_time}"
            buildConfigField "String", "BUILD_TYPE", "\"development\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_14
        targetCompatibility JavaVersion.VERSION_14
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/MANIFEST.MF', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/ASL2.0']
        }
    }
    flavorDimensions 'type'
    productFlavors {
        'default' {
            dimension 'type'
        }
    }
}

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

dependencies {
    implementation 'androidx.browser:browser:1.8.0'
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation 'androidx.core:core:1.13.1'
    implementation 'androidx.webkit:webkit:1.11.0'
    implementation 'androidx.profileinstaller:profileinstaller:1.3.1'
    implementation 'androidx.room:room-runtime:2.6.1'

    implementation "com.github.topjohnwu.libsu:core:5.2.1"
    implementation "com.github.topjohnwu.libsu:io:5.2.1"

    implementation 'org.apache.cordova:framework:12.0.1'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
}

configurations.implementation.setCanBeResolved(true)

def npmRunPATH = "${System.getenv("PATH")}:./../../Website/node_modules/.bin:./../Website/node_modules/.bin"

tasks.register('npmInstall', Exec) {
    workingDir "./../../Website"
    environment PATH: npmRunPATH
    commandLine "npm", "install", "-f"
}

tasks.register('webDev', Exec) {
    workingDir "./../../Website"
    environment PATH: npmRunPATH
    commandLine "npm", "run", "web:dev-app"
}

tasks.register('webProd', Exec) {
    workingDir "./../../Website"
    environment PATH: npmRunPATH
    commandLine "npm", "run", "web:prod-app"
}

tasks.register('printDepsTreeInJson') {
    doLast {
        configurations.implementation.incoming.getResolutionResult().getAllDependencies().each { depResult ->
            println "{\"from\":\"" + depResult.getFrom() + "\"," + "\"requested\":\"" + depResult.getRequested() + "\"}"
        }
    }
}

tasks.register('printSolvedDepsTreeInJson') {
    doLast {
        def jsonOutput = "["
        configurations.implementation.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
            def addToJson
            addToJson = { resolvedDep ->
                jsonOutput += "\n{"
                jsonOutput += "\"name\":\"${resolvedDep.module.id.group}:${resolvedDep.module.id.name}\","
                jsonOutput += "\"description\":\"${resolvedDep.module.id}\","
                jsonOutput += "\"version\":\"${resolvedDep.module.id.version}\","
                jsonOutput += "\"license\":\"null\","
                jsonOutput += "\"author\":\"null\","
                jsonOutput += "\"repository\":\"https://mvnrepository.com/artifact/${resolvedDep.module.id.group}/${resolvedDep.module.id.name}/${resolvedDep.module.id.version}\""
                jsonOutput += "},"
            }
            addToJson(dep)
        }
        if (jsonOutput[-1] == ',') {
            jsonOutput = jsonOutput[0..-2]
        }
        jsonOutput += "]"

        // This took me more than two hours to make -_-
        def jsonFile = new JsonSlurper().parseText(jsonOutput)
        def json = JsonOutput.toJson(jsonFile)
        def pretty = JsonOutput.prettyPrint(json)
        def myFile = new File('./../Website/src/utils/native-licenses.json')
        myFile.write(pretty)
    }
}
